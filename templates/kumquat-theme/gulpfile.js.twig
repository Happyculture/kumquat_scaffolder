import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
const argv = yargs(hideBin(process.argv)).argv;

import del from 'del';
import gulp from 'gulp';
import gulpStylelint from '@ronilaukkarinen/gulp-stylelint';
import eslint from 'gulp-eslint';
import uglify from 'gulp-uglify';
import plumber from 'gulp-plumber';
import postcss from 'gulp-postcss';
import rename from 'gulp-rename';
import replace from 'gulp-replace';
import * as dartSass from 'sass';
import gulpSass from 'gulp-sass';
import sassGlob from 'gulp-sass-glob';
import sassdoc from 'sassdoc';
import sourcemaps from 'gulp-sourcemaps';
import imagemin, {gifsicle, optipng, svgo} from 'gulp-imagemin';
import jpegtran from 'imagemin-jpegtran';

const sass = gulpSass(dartSass);

// PostCSS processors.
import autoprefixer from 'autoprefixer';
import cssnano from 'cssnano';
import discardUnused from 'postcss-discard-unused';
import mqpacker from 'css-mqpacker';
var processors = [
  discardUnused(),
  autoprefixer(),
  mqpacker({sort: true})
];
if (!argv.development) {
  processors.push(cssnano());
}

// SASS parameters.
var sassParams = {
  outputStyle: 'compressed',
};
if (argv.development) {
  sassParams.outputStyle = 'expanded';
}

/**
 * Clean compiled files.
 */
const runCleanFolders = () => {
  return del([
    'dist/css/**/*',
    '!dist/css/.gitkeep',
    'dist/fonts/**/*',
    '!dist/fonts/.gitkeep',
    'dist/images/**/*',
    '!dist/images/.gitkeep',
    'dist/js/**/*',
    '!dist/js/.gitkeep',
    'docs',
    '!docs/.gitkeep'
  ])
}

/**
 * Lint styles.
 */
const runLintStyles = () => {
  return gulp.src(['assets-src/sass/**/*.scss', 'templates/**/*.scss'], {since: gulp.lastRun(runLintStyles)})
  .pipe(plumber())
  .pipe(gulpStylelint({
    reporters: [
      {formatter: 'string', console: true}
    ]
  }))
}

/**
 * Lint scripts.
 */
const runLintScripts = () => {
  return gulp.src(['assets-src/js/*.js', 'templates/**/*.js', '!templates/**/*.min.js'], {since: gulp.lastRun(runLintScripts)})
  .pipe(plumber())
  .pipe(eslint())
  .pipe(eslint.format())
}

/**
 * Compile global styles.
 */
const runStylesGlobal = () => {
  const stream = gulp.src('assets-src/sass/*.scss');
  stream.pipe(plumber());
  if (argv.development) {
    stream.pipe(sourcemaps.init());
  }
  stream
    .pipe(sassGlob())
    .pipe(sass.sync(sassParams).on('error', sass.logError))
    .pipe(replace('@root', '../..'))
    .pipe(postcss(processors));
  if (argv.development) {
    stream.pipe(sourcemaps.write('.'));
  }
  return stream.pipe(gulp.dest('dist/css'));
}

/**
 * Watch global styles.
 */
const watchStylesGlobal = () => {
  return gulp.watch('assets-src/sass/**/*.scss', runStylesGlobal);
}

/**
 * Compile pattern styles.
 */
const runStylesPatterns = () => {
  return doStylesPatterns(gulp.lastRun(runStylesPatterns));
}

/**
 * Watch patterns styles.
 */
const watchStylesPatterns = () => {
  return gulp.watch(['templates/**/*.scss'], runStylesPatterns);
}

/**
 * Force all pattern styles compilation.
 */
const runStylesPatternsForce = () => {
  return doStylesPatterns();
}

/**
 * Watch patterns styles dependencies.
 */
const watchStylesPatternsDependencies = () => {
  return gulp.watch(['assets-src/sass/variables/**/*.scss', 'assets-src/sass/abstractions/**/*.scss'], runStylesPatternsForce);
}

/**
 * Helper to run pattern styles compilation.
 */
const doStylesPatterns = (since = 0) => {
  const stream = gulp.src('templates/**/*.scss', {since: since});
  stream.pipe(plumber());
  if (argv.development) {
    stream.pipe(sourcemaps.init());
  }
  stream
    .pipe(replace('@global', '../../../../assets-src/sass'))
    .pipe(sassGlob())
    .pipe(sass.sync(sassParams).on('error', sass.logError))
    .pipe(replace('@root', '../../../..'))
    .pipe(postcss(processors));
  if (argv.development) {
    stream.pipe(sourcemaps.write('.'));
  }
  return stream.pipe(gulp.dest('templates'));
}

/**
 * Compile styles documentation.
 */
const runDocStyles = () => {
  const stream = gulp.src(['assets-src/sass/**/*.scss', 'templates/**/*.scss']);
  if (argv.development) {
    stream.pipe(sassdoc({
      dest: 'docs/sass'
    }));
  }
  return stream;
}

/**
 * Watch styles for documentation.
 */
const watchDocStyles = () => {
  return gulp.watch(['assets-src/sass/**/*.scss', 'templates/**/*.scss'], runDocStyles);
}

/**
 * Compile global scripts.
 */
const runScriptsGlobal = () => {
  const stream = gulp.src(['assets-src/js/**/*.js', '!assets-src/js/**/*.min.js'], {since: gulp.lastRun(runScriptsGlobal)});
  stream
    .pipe(plumber())
    .pipe(eslint())
    .pipe(eslint.format());
  if (!argv.development) {
    stream.pipe(uglify());
  }
  stream
    .pipe(rename({suffix: '.min'}));
  return stream.pipe(gulp.dest('dist/js'));
}

/**
 * Watch global scripts.
 */
const watchScriptsGlobal = () => {
  return gulp.watch(['assets-src/js/**/*.js', '!assets-src/js/**/*.min.js'], runScriptsGlobal);
}

/**
 * Compile patterns scripts.
 */
const runScriptsPatterns = () => {
  const stream = gulp.src(['templates/**/*.js', '!templates/**/*.min.js'], {since: gulp.lastRun(runScriptsPatterns)});
  stream
    .pipe(plumber())
    .pipe(eslint())
    .pipe(eslint.format());
  if (!argv.development) {
    stream.pipe(uglify());
  }
  stream
    .pipe(rename({suffix: '.min'}));
  return stream.pipe(gulp.dest('templates'));
}

/**
 * Watch patterns scripts.
 */
const watchScriptsPatterns = () => {
  return gulp.watch(['templates/**/*.js', '!templates/**/*.min.js'], runScriptsPatterns);
}

/**
 * Compile global images.
 */
const runImagesGlobal = () => {
  return gulp.src('assets-src/images/**/*', {since: gulp.lastRun(runImagesGlobal)})
    .pipe(imagemin([gifsicle(), jpegtran(), optipng(), svgo({
      plugins: [
        {
          name: 'removeViewBox',
          active: false
        },
        {
          name: 'addAttributesToSVGElement',
          params: {
            attributes: [
              { "aria-hidden": "true" },
              { "focusable": "false" }
            ]
          }
        }
      ]
    })]))
    .pipe(gulp.dest('dist/images'))
}

/**
 * Watch images.
 */
const watchImages = () => {
  return gulp.watch('assets-src/images/**/*', runImagesGlobal);
}

/**
 * Compile global fonts.
 */
const runFontsGlobal = () => {
  return gulp.src('assets-src/fonts/**/*', {since: gulp.lastRun(runFontsGlobal)})
    // TODO Lossless compression.
    .pipe(gulp.dest('dist/fonts'))
}

/**
 * Watch fonts.
 */
const watchFonts = () => {
  return gulp.watch('assets-src/fonts/**/*', runFontsGlobal);
}

const runLint = gulp.parallel(runLintStyles, runLintScripts);
const runStyles = gulp.parallel(runStylesGlobal, runStylesPatterns);
const runScripts = gulp.parallel(runScriptsGlobal, runScriptsPatterns);
const runDoc = gulp.parallel(runDocStyles);
const runBuild = gulp.series(runCleanFolders, gulp.parallel(runLint, runStyles, runScripts, runDoc, runImagesGlobal, runFontsGlobal));
const doWatch = gulp.parallel(watchScriptsGlobal, watchScriptsPatterns, watchStylesPatterns, watchStylesPatternsDependencies, watchStylesGlobal, watchDocStyles, watchImages);
const runWatch = gulp.series(runBuild, doWatch);
export {
  runCleanFolders as clean,
  runLint as lint,
  runStyles as styles,
  runScripts as scripts,
  runDoc as doc,
  runImagesGlobal as images,
  runFontsGlobal as fonts,
  runBuild as build,
  runWatch as watch
};
export default runBuild;
