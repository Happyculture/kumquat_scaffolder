import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
const argv = yargs(hideBin(process.argv)).argv;

import del from 'del';
import gulp from 'gulp';
import gulpif from 'gulp-if';
import gulpStylelint from 'gulp-stylelint';
import eslint from 'gulp-eslint';
import uglify from 'gulp-uglify';
import plumber from 'gulp-plumber';
import postcss from 'gulp-postcss';
import rename from 'gulp-rename';
import replace from 'gulp-replace';
import dartSass from 'sass';
import gulpSass from 'gulp-sass';
const sass = gulpSass(dartSass);
import sassGlob from 'gulp-sass-glob';
import sourcemaps from 'gulp-sourcemaps';
import imagemin, {gifsicle, optipng, svgo} from 'gulp-imagemin';
import jpegtran from 'imagemin-jpegtran';

// PostCSS processors.
import autoprefixer from 'autoprefixer';
import cssnano from 'cssnano';
import discardUnused from 'postcss-discard-unused';
import mqpacker from 'css-mqpacker';
var processors = [
  discardUnused(),
  autoprefixer(),
  mqpacker({sort: true})
];
if (!argv.development) {
  processors.push(cssnano());
}

// SASS parameters.
var sassParams = {
  outputStyle: 'compressed',
};
if (argv.development) {
  sassParams.outputStyle = 'expanded';
}

// Clean compiled files..
export function cleanFolders () {
  return del([
    'dist/css/**/*',
    '!dist/css/.gitkeep',
    'dist/fonts/**/*',
    '!dist/fonts/.gitkeep',
    'dist/images/**/*',
    '!dist/images/.gitkeep',
    'dist/js/**/*',
    '!dist/js/.gitkeep'
  ])
}

// Lint styles
function lintStyles () {
  return gulp.src(['assets-src/sass/**/*.scss', 'templates/**/*.scss'])
  .pipe(plumber())
  .pipe(gulpStylelint({
    reporters: [
      {formatter: 'string', console: true}
    ]
  }))
}
function lintScripts () {
  return gulp.src(['assets-src/js/*.js', 'templates/**/*.js', '!templates/**/*.min.js'])
  .pipe(plumber())
  .pipe(eslint())
  .pipe(eslint.format())
}
export const lint = gulp.parallel(lintStyles, lintScripts);

function stylesGlobal () {
  return gulp.src('assets-src/sass/*.scss')
    .pipe(plumber())
    .pipe(gulpif(argv.development, sourcemaps.init()))
    .pipe(sassGlob())
    .pipe(sass.sync(sassParams))
    .pipe(replace('@root', '../..'))
    .pipe(postcss(processors))
    .pipe(gulpif(argv.development, sourcemaps.write('.')))
    .pipe(gulp.dest('dist/css'))
}
function stylesPatterns () {
  return gulp.src('templates/**/*.scss')
    .pipe(plumber())
    .pipe(gulpif(argv.development, sourcemaps.init()))
    .pipe(replace('@global', '../../../../assets-src/sass'))
    .pipe(sassGlob())
    .pipe(sass.sync(sassParams))
    .pipe(replace('@root', '../../../..'))
    .pipe(postcss(processors))
    .pipe(gulpif(argv.development, sourcemaps.write('.')))
    .pipe(gulp.dest('templates'))
}
export const styles = gulp.parallel(stylesGlobal, stylesPatterns);

// Compile scripts.
function scriptsGlobal () {
  return gulp.src('assets-src/js/*.js')
    .pipe(plumber())
    .pipe(eslint())
    .pipe(eslint.format())
    .pipe(gulpif(!argv.development, uglify()))
    .pipe(rename({suffix: '.min'}))
    .pipe(gulp.dest('dist/js'))
}
function scriptsPatterns () {
  return gulp.src(['templates/**/*.js', '!templates/**/*.min.js'])
    .pipe(plumber())
    .pipe(eslint())
    .pipe(eslint.format())
    .pipe(gulpif(!argv.development, uglify()))
    .pipe(rename({suffix: '.min'}))
    .pipe(gulp.dest('templates'))
}
export const scripts = gulp.parallel(scriptsGlobal, scriptsPatterns);

// Compile images.
function imagesGlobal () {
  return gulp.src('assets-src/images/**/*')
    .pipe(imagemin([gifsicle(), jpegtran(), optipng(), svgo({
      plugins: [
        {
          name: 'removeViewBox',
          active: false
        }
      ]
    })]))
    .pipe(gulp.dest('dist/images'))
}
export const images = gulp.parallel(imagesGlobal);

// Compile fonts.
function fontsGlobal () {
  return gulp.src('assets-src/fonts/**/*')
    // TODO Lossless compression.
    .pipe(gulp.dest('dist/fonts'))
}
export const fonts = gulp.parallel(fontsGlobal);

// Default actions.
export const build = gulp.series(cleanFolders, gulp.parallel(lintStyles, styles, scripts, images, fonts));
export default build;

// Watcher.
function watchScripts () {
  return gulp.watch(['templates/**/*.js', '!templates/**/*.min.js', 'assets-src/js/**/*.js', '!assets-src/js/**/*.min.js', '!gulpfile.js'], scripts);
}
function watchStylesPatterns () {
  return gulp.watch(['templates/**/*.scss', 'assets-src/sass/variables/*.scss', 'assets-src/sass/abstractions/*.scss'], stylesPatterns);
}
function watchStylesGlobal () {
  return gulp.watch('assets-src/sass/**/*.scss', stylesGlobal);
}
function watchImages () {
  return gulp.watch('assets-src/images/**/*', images);
}
const doWatch = gulp.parallel(watchScripts, watchStylesPatterns, watchStylesGlobal, watchImages);
export const watch = gulp.series(build, doWatch);
