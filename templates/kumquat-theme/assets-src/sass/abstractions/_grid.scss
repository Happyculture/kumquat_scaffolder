@use "sass:map";

// Functions.

@function grid-gutter-size($device: mobile) {
  @return map.get($gutter-size, $device);
}

@function grid-external-gutter-size($device: mobile) {
  @return map.get($external-gutter-size, $device);
}

@function grid-max-width($device: mobile) {
  @return map.get($grid-max-size, $device);
}

// Mixins.

@mixin grid-container($device: mobile) {
  display: grid;
  grid-column-gap: map.get($gutter-size, $device);
  grid-row-gap: map.get($rythm-base, $device);
  grid-template-columns: repeat(map.get($nb-cols, $device), map.get($col-size, $device));
}

@mixin grid-setup-grid() {
  @each $device in $major-breakpoints {
    @include media('>=#{$device}') {
      @include grid-container($device);
    }
  }
}

@mixin grid-setup-width() {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: var(--external-gutter-size);
  padding-left: var(--external-gutter-size);

  @each $device in $major-breakpoints {
    @include media('>=#{$device}') {
      max-width: grid-max-width($device);
    }
  }
}

@mixin grid-setup($subgrid: false) {
  @if $subgrid == false {
    @include grid-setup-width;
  }
  @include grid-setup-grid;
}

@mixin subgrid-setup() {
  @include grid-setup(true);
}

@mixin grid-column($start: auto, $span: 1) {
  grid-column: #{$start} / #{$start + $span};
}

@mixin grid-row($start: auto, $span: 1) {
  grid-row: #{$start} / #{$start + $span};
}
